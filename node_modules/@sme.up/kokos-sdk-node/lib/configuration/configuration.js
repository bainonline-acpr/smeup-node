import path from "path";
import os from "os";
import fs from "fs";
import yaml from "js-yaml";
const baseDir = path.join(os.homedir(), "etc", "kokos");
export const globalConfiguration = {
    microExecutorId: "me-node-example"
};
/**
 * Init micro executor configuration
 * @param microExecutorId
 * @param defatultConfigurationClass
 * @returns
 */
export function init(microExecutorId, defatultConfigurationClass) {
    const microExecutorBaseDir = path.join(baseDir, microExecutorId);
    const microExecutorConfigFilePath = path.join(microExecutorBaseDir, microExecutorId + ".yaml");
    // create dir if not exists
    if (!fs.existsSync(microExecutorBaseDir)) {
        fs.mkdirSync(microExecutorBaseDir, { recursive: true });
    }
    // create config file if not exists
    if (!fs.existsSync(microExecutorConfigFilePath)) {
        const yamlData = yaml.dump(defatultConfigurationClass);
        fs.writeFileSync(microExecutorConfigFilePath, yamlData, "utf8");
    }
    // load configuration
    const yamlData = fs.readFileSync(microExecutorConfigFilePath, "utf8");
    const yamlObject = yaml.load(yamlData);
    const configuration = { ...defatultConfigurationClass, ...yamlObject };
    // set global configuration
    globalConfiguration.microExecutorId = microExecutorId;
    return configuration;
}
//# sourceMappingURL=configuration.js.map