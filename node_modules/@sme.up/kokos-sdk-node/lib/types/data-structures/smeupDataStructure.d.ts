import { Fun } from "../general.js";
/**
 * Smeup data structure
 */
export interface SmeupDataStructure {
    type: SmeupDataStructureType;
    messages: SmeupMessage[];
    debugInfo: DebugInfo;
}
/**
 * Api version
 */
export declare enum ApiVersion {
    V1 = 0,
    V2 = 1
}
/**
 * SmeupDataStructure types
 */
export declare enum SmeupDataStructureType {
    /** Smeup table (EXB) */
    SmeupTable = "SmeupTable",
    /** Smeup tree node (TRE) */
    SmeupTree = "SmeupTreeNode",
    /** Smeup feedback (FBK) */
    SmeupFeedback = "SmeupFeedback",
    /** Smeup Raw Data (EXD) */
    SmeupRawData = "SmeupRawData",
    /** SmeupDataTable (DTA) */
    SmeupDataTable = "SmeupDataTable",
    /** SmeupDataTree (DTR) */
    SmeupDataTree = "SmeupDataTree"
}
export declare function getSmeupDataStructureType(fun: Fun, version: ApiVersion): SmeupDataStructureType;
/**
 * Smeup data structure
 */
export interface SmeupFeedback extends SmeupDataStructure {
    type: SmeupDataStructureType.SmeupFeedback;
}
/**
 * SmeupMessage type
 */
export interface SmeupMessage {
    gravity: SmeupMessageGravity;
    message: string;
    mode: string;
}
/**
 * SmeupMessage Gravity
 */
export declare const SMEUP_MESSAGE_GRAVITY: {
    readonly INFO: "INFO";
    readonly ERROR: "ERROR";
    readonly WARNING: "WARNING";
};
type SmeupMessageGravity = (typeof SMEUP_MESSAGE_GRAVITY)[keyof typeof SMEUP_MESSAGE_GRAVITY];
/**
 * SmeupMessage Mode
 */
export declare const SMEUP_MESSAGE_MODE: {
    readonly PM: "PM";
    readonly PN: "PN";
    readonly TN: "TN";
};
export interface DebugInfo {
    executionTime_ms: number;
    initialTimestamp: string;
    finalTimestamp: string;
}
export {};
