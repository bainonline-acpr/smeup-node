/**
 * Api version
 */
export var ApiVersion;
(function (ApiVersion) {
    ApiVersion[ApiVersion["V1"] = 0] = "V1";
    ApiVersion[ApiVersion["V2"] = 1] = "V2";
})(ApiVersion || (ApiVersion = {}));
/**
 * SmeupDataStructure types
 */
export var SmeupDataStructureType;
(function (SmeupDataStructureType) {
    /** Smeup table (EXB) */
    SmeupDataStructureType["SmeupTable"] = "SmeupTable";
    /** Smeup tree node (TRE) */
    SmeupDataStructureType["SmeupTree"] = "SmeupTreeNode";
    /** Smeup feedback (FBK) */
    SmeupDataStructureType["SmeupFeedback"] = "SmeupFeedback";
    /** Smeup Raw Data (EXD) */
    SmeupDataStructureType["SmeupRawData"] = "SmeupRawData";
    /** SmeupDataTable (DTA) */
    SmeupDataStructureType["SmeupDataTable"] = "SmeupDataTable";
    /** SmeupDataTree (DTR) */
    SmeupDataStructureType["SmeupDataTree"] = "SmeupDataTree";
})(SmeupDataStructureType || (SmeupDataStructureType = {}));
export function getSmeupDataStructureType(fun, version) {
    switch (fun.component) {
        case "TRE":
            return version == ApiVersion.V1
                ? SmeupDataStructureType.SmeupTree
                : SmeupDataStructureType.SmeupDataTree;
        case "EXB":
            return version == ApiVersion.V1
                ? SmeupDataStructureType.SmeupTable
                : SmeupDataStructureType.SmeupDataTable;
        case "FBK":
            return SmeupDataStructureType.SmeupFeedback;
        case "EXD":
        case "CDE":
        case "EDT":
        case "HTM":
            return SmeupDataStructureType.SmeupRawData;
        default:
            throw new Error(`${fun.component} not correspond to a valid SmeupDataStrcuture type`);
    }
}
/**
 * SmeupMessage Gravity
 */
export const SMEUP_MESSAGE_GRAVITY = {
    INFO: "INFO",
    ERROR: "ERROR",
    WARNING: "WARNING",
};
/**
 * SmeupMessage Mode
 */
export const SMEUP_MESSAGE_MODE = {
    PM: "PM",
    PN: "PN",
    TN: "TN",
};
//# sourceMappingURL=smeupDataStructure.js.map