var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { IsObject, IsOptional, IsString, ValidateNested, } from "class-validator";
export class ErrorWithStatus extends Error {
    status = 500;
    constructor(message, status) {
        super(message);
        this.status = status;
    }
}
/**
 * Fun Object
 */
export class FunObject {
    t;
    p;
    k;
}
__decorate([
    IsString(),
    __metadata("design:type", String)
], FunObject.prototype, "t", void 0);
__decorate([
    IsString(),
    __metadata("design:type", String)
], FunObject.prototype, "p", void 0);
__decorate([
    IsString(),
    __metadata("design:type", String)
], FunObject.prototype, "k", void 0);
/**
 * Fun
 */
export class Fun {
    component;
    service;
    function;
    obj1;
    obj2;
    obj3;
    obj4;
    obj5;
    obj6;
    P;
    INPUT;
}
__decorate([
    IsString(),
    __metadata("design:type", String)
], Fun.prototype, "component", void 0);
__decorate([
    IsString(),
    __metadata("design:type", String)
], Fun.prototype, "service", void 0);
__decorate([
    IsString(),
    __metadata("design:type", String)
], Fun.prototype, "function", void 0);
__decorate([
    IsObject(),
    IsOptional(),
    ValidateNested(),
    __metadata("design:type", FunObject)
], Fun.prototype, "obj1", void 0);
__decorate([
    IsObject(),
    IsOptional(),
    ValidateNested(),
    __metadata("design:type", FunObject)
], Fun.prototype, "obj2", void 0);
__decorate([
    IsObject(),
    IsOptional(),
    ValidateNested(),
    __metadata("design:type", FunObject)
], Fun.prototype, "obj3", void 0);
__decorate([
    IsObject(),
    IsOptional(),
    ValidateNested(),
    __metadata("design:type", FunObject)
], Fun.prototype, "obj4", void 0);
__decorate([
    IsObject(),
    IsOptional(),
    ValidateNested(),
    __metadata("design:type", FunObject)
], Fun.prototype, "obj5", void 0);
__decorate([
    IsObject(),
    IsOptional(),
    ValidateNested(),
    __metadata("design:type", FunObject)
], Fun.prototype, "obj6", void 0);
__decorate([
    IsString(),
    IsOptional(),
    __metadata("design:type", String)
], Fun.prototype, "P", void 0);
__decorate([
    IsString(),
    IsOptional(),
    __metadata("design:type", String)
], Fun.prototype, "INPUT", void 0);
/**
 * User Type
 */
export class User {
    sessionId;
    username;
    environment;
    device;
}
__decorate([
    IsString(),
    __metadata("design:type", String)
], User.prototype, "sessionId", void 0);
__decorate([
    IsString(),
    __metadata("design:type", String)
], User.prototype, "username", void 0);
__decorate([
    IsString(),
    __metadata("design:type", String)
], User.prototype, "environment", void 0);
__decorate([
    IsString(),
    __metadata("design:type", String)
], User.prototype, "device", void 0);
export class SourceLibrary {
    path;
}
__decorate([
    IsString(),
    __metadata("design:type", String)
], SourceLibrary.prototype, "path", void 0);
/**
 * Registry
 */
export class Registry {
    handlers;
    services;
    aliases;
}
__decorate([
    IsObject(),
    ValidateNested(),
    __metadata("design:type", Object)
], Registry.prototype, "handlers", void 0);
__decorate([
    IsObject(),
    ValidateNested(),
    __metadata("design:type", Object)
], Registry.prototype, "services", void 0);
__decorate([
    IsObject(),
    ValidateNested(),
    __metadata("design:type", Object)
], Registry.prototype, "aliases", void 0);
/**
 * Environment
 */
export class Environment {
    registry;
    libraries;
}
__decorate([
    IsObject(),
    IsOptional(),
    ValidateNested(),
    __metadata("design:type", Registry)
], Environment.prototype, "registry", void 0);
__decorate([
    IsObject(),
    IsOptional(),
    ValidateNested(),
    __metadata("design:type", Object)
], Environment.prototype, "libraries", void 0);
/**
 * Execution Context
 */
export class ExecutionContext {
    user;
    env;
}
__decorate([
    IsObject(),
    IsOptional(),
    ValidateNested(),
    __metadata("design:type", User)
], ExecutionContext.prototype, "user", void 0);
__decorate([
    IsObject(),
    IsOptional(),
    ValidateNested(),
    __metadata("design:type", Environment)
], ExecutionContext.prototype, "env", void 0);
/**
 * Execute Fun payalod DTO
 */
export class ExecuteFunPayload {
    fun;
    context;
}
__decorate([
    IsObject(),
    ValidateNested(),
    __metadata("design:type", Fun)
], ExecuteFunPayload.prototype, "fun", void 0);
__decorate([
    IsObject(),
    ValidateNested(),
    __metadata("design:type", ExecutionContext)
], ExecuteFunPayload.prototype, "context", void 0);
//# sourceMappingURL=general.js.map