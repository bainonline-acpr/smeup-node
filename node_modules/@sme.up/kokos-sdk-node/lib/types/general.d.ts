import { SmeupDataStructureWriter } from "../utils/smeupDataStructureWriter.js";
import { Format, Level } from "../logger/logger.js";
export declare class ErrorWithStatus extends Error {
    status: number;
    constructor(message: string, status: number);
}
/**
 * Micro Executor base config. To personalize the configuration you can extend this interface
 */
export interface MicroExecutorConfiguration {
    server: {
        port: 8011 | number;
    };
    logger: {
        format: Format;
        level: Level;
    };
}
/**
 * Fun Object
 */
export declare class FunObject {
    t: string;
    p: string;
    k: string;
}
/**
 * Fun
 */
export declare class Fun {
    component: string;
    service: string;
    function: string;
    obj1?: FunObject;
    obj2?: FunObject;
    obj3?: FunObject;
    obj4?: FunObject;
    obj5?: FunObject;
    obj6?: FunObject;
    P?: string;
    INPUT?: string;
}
/**
 * User Type
 */
export declare class User {
    sessionId: string;
    username: string;
    environment: string;
    device: string;
}
export declare class SourceLibrary {
    path: string;
}
/**
 * Registry
 */
export declare class Registry {
    handlers?: {
        [id: string]: string;
    };
    services?: {
        [key: string]: string;
    };
    aliases?: {
        [key: string]: string;
    };
}
/**
 * Environment
 */
export declare class Environment {
    registry?: Registry;
    libraries?: {
        [key: string]: SourceLibrary;
    };
}
/**
 * Execution Context
 */
export declare class ExecutionContext {
    user?: User;
    env?: Environment;
}
/**
 * Execute Fun payalod DTO
 */
export declare class ExecuteFunPayload {
    fun: Fun;
    context: ExecutionContext;
}
/**
 * Type of Kokos Service ES Module
 */
export interface KokosServiceModule {
    default: KokosService;
}
/**
 * Kokos Service Interface
 */
export interface KokosService {
    methods: KokosServiceMethods;
}
/**
 * Kokos Service Method
 */
export interface KokosServiceMethods {
    [key: string]: (fun: Fun, context: ExecutionContext, printer: SmeupDataStructureWriter) => Promise<void>;
}
