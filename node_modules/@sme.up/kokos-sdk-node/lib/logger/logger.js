import async_hooks from "async_hooks";
export var Level;
(function (Level) {
    Level["INFO"] = "INFO";
    Level["DEBUG"] = "DEBUG";
    Level["ERROR"] = "ERROR";
})(Level || (Level = {}));
export var Format;
(function (Format) {
    Format["JSON"] = "JSON";
    Format["TXT"] = "TXT";
})(Format || (Format = {}));
const LOGGER_SETTING = {
    level: Level.DEBUG,
    format: Format.TXT,
};
const LOGGER_CONTEXT_MAP = {};
export const configureLogger = (level, format) => {
    LOGGER_SETTING.level = level ? level : Level.DEBUG;
    LOGGER_SETTING.format = format ? format : Format.TXT;
};
export const createLoggerContext = (context) => {
    // get the async execution id
    const id = async_hooks.executionAsyncId();
    // save to context map
    LOGGER_CONTEXT_MAP[id] = context;
};
export const clearLoggerContext = () => {
    // get the async execution id
    const id = async_hooks.executionAsyncId();
    // delete from context map
    delete LOGGER_CONTEXT_MAP[id];
};
class Logger {
    info(message) {
        this._log(Level.INFO, message);
    }
    debug(message) {
        this._log(Level.DEBUG, message);
    }
    error(error) {
        this._log(Level.ERROR, error.message, error);
    }
    _log(level, message, error) {
        // logger level
        if (LOGGER_SETTING.level == Level.INFO && level == Level.DEBUG) {
            return;
        }
        // get the async execution id
        const id = async_hooks.executionAsyncId();
        // get context
        const context = LOGGER_CONTEXT_MAP[id];
        // create log record
        const record = {
            ...context,
            timestamp: new Date().toISOString(),
            applicationId: "",
            message: message,
            level: level.toString(),
            applicationReserved: {
                executionId: id.toString(),
                stackTrace: error && error.stack ? error.stack : "",
            },
        };
        let stringRecord = "";
        if (LOGGER_SETTING.format == Format.JSON) {
            stringRecord = JSON.stringify(record);
        }
        else {
            stringRecord = `${record.timestamp} ${record.applicationReserved.executionId} ${record.level} - ${record.message} ${record.applicationReserved.stackTrace
                ? record.applicationReserved.stackTrace
                : ""}`;
        }
        switch (level) {
            case Level.INFO:
                console.info(stringRecord);
                break;
            case Level.DEBUG:
                console.debug(stringRecord);
                break;
            case Level.ERROR:
                console.error(stringRecord);
                break;
        }
    }
}
export const LOGGER = new Logger();
//# sourceMappingURL=logger.js.map