import { parseKeyValueBetweenBrackets } from "./regex.js";
export function funToString(fun) {
    return `F(${fun.component};${fun.service};${fun.function}) ${fun.obj1 && "1(" + funObjectToString(fun.obj1) + ")"} ${fun.obj2 && "2(" + funObjectToString(fun.obj2) + ")"} ${fun.obj3 && "3(" + funObjectToString(fun.obj3) + ")"} ${fun.obj4 && "4(" + funObjectToString(fun.obj4) + ")"} ${fun.obj5 && "5(" + funObjectToString(fun.obj5) + ")"} ${fun.obj6 && "6(" + funObjectToString(fun.obj6) + ")"} ${fun.P && "P(" + fun.P ? fun.P : "" + ")"} ${fun.INPUT && "INPUT(" + fun.INPUT ? fun.INPUT : "" + ")"}`;
}
export function funObjectToString(obj) {
    if (obj) {
        return `${obj.t ? obj.t : ""};${obj.p ? obj.p : ""};${obj.k ? obj.k : ""}`;
    }
    else {
        return ";;";
    }
}
export function stringToFun(funString) {
    var fun = {
        component: "", service: "", function: "",
        obj1: { t: "", p: "", k: "" },
        obj2: { t: "", p: "", k: "" },
        obj3: { t: "", p: "", k: "" },
        obj4: { t: "", p: "", k: "" },
        obj5: { t: "", p: "", k: "" },
        obj6: { t: "", p: "", k: "" },
        INPUT: "",
        P: ""
    };
    var componentsMap = parseKeyValueBetweenBrackets(funString);
    for (const key in componentsMap) {
        switch (key) {
            case "F":
                const compServMeto = componentsMap[key].split(";");
                if (compServMeto.length == 3) {
                    fun.component = compServMeto[0];
                    fun.service = compServMeto[1];
                    fun.function = compServMeto[2];
                }
                else {
                    throw new Error("StringToFun - Unexpected format for F values");
                }
                break;
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
                const funKey = `obj${key}`;
                const obj = fun[funKey];
                const objTPK = componentsMap[key].split(";");
                if (obj && objTPK.length == 3) {
                    obj.t = objTPK[0];
                    obj.p = objTPK[1];
                    obj.k = objTPK[2];
                }
                else {
                    throw new Error("StringToFun - Unexpected format for obj" + key + " values");
                }
                break;
            case "INPUT":
                fun.INPUT = componentsMap[key];
                break;
            case "P":
                fun.P = componentsMap[key];
                break;
        }
    }
    return fun;
}
//# sourceMappingURL=fun.js.map