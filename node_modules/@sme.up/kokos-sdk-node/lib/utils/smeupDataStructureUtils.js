export const dataNodeToSmeupTreeNode = (dataNode, columns) => {
    const treeNode = {
        content: {
            tipo: dataNode.obj?.t ?? "",
            parametro: dataNode.obj?.p ?? "",
            codice: dataNode.obj?.k ?? "",
            testo: dataNode.value,
            exec: dataNode.fun,
            i: dataNode.icon,
        },
        row: dataNode.cells
            ? dataRowToSmeupRow(dataNode.cells, columns)
            : undefined,
        children: dataNode.children?.map((e) => dataNodeToSmeupTreeNode(e, columns)),
    };
    return treeNode;
};
export const dataColumnToSmeupColumn = (dataColumn) => {
    return {
        code: dataColumn.name,
        text: dataColumn.title,
        ogg: dataColumn.objectType,
        IO: dataColumn != undefined && dataColumn.graphic == true ? "G" : (dataColumn.visible == false ? "H" : "O"),
    };
};
export const dataRowToSmeupRow = (row, columns) => {
    const r = {
        fields: {},
    };
    columns.forEach((col) => {
        const cell = {
            name: col.name,
            smeupObject: {
                tipo: row.cells?.[col.name].obj?.t ?? "",
                parametro: row.cells?.[col.name].obj?.p ?? "",
                codice: row.cells?.[col.name].obj?.k ?? "",
                testo: row.cells?.[col.name].value,
                exec: row.cells?.[col.name].fun,
                i: row.cells?.[col.name].icon,
            },
        };
        r.fields[cell.name] = cell;
    });
    return r;
};
//# sourceMappingURL=smeupDataStructureUtils.js.map